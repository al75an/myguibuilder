package guibuilder

////////////////////////////////////////////////////////////////////

import javafx.application._
import javafx.stage._
import javafx.scene._
import javafx.scene.layout._
import javafx.scene.control._
import javafx.scene.canvas._
import javafx.scene.input._
import javafx.scene.paint._
import javafx.scene.text._
import javafx.scene.web._
import javafx.scene.image._
import javafx.event._
import javafx.geometry._
import javafx.beans.value._
import javafx.collections._
import javafx.concurrent.Worker._

import collection.JavaConversions._

////////////////////////////////////////////////////////////////////

import java.io._
import scala.io._

////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
// mycomponent is responsible defining elements of the MyComponent hierarchy
// MyComponent elements encapsulate JavaFX widgets
// or build composite widgets out of them
// equip them with common sense behaviour, unified event handling and backup
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
// class MyComponent
////////////////////////////////////////////////////////////////////

// MyComponent is the base of the component hierarchy

abstract class MyComponent extends PrintableInterface with GetSetTypedStringValueWithDefault
{

	// variable members
	// path identifies the component within the component data hierarchy
	private var path:Path=null

	// parent is the parent component of the component, can be null
	protected var parent:MyComponent=null

	// attributes are named string attributes of the component
	private var attributes:Map[String,String]=Map[String,String]()

	// children are the children of the component
	protected var children:scala.collection.mutable.ArrayBuffer[MyComponent]=scala.collection.mutable.ArrayBuffer[MyComponent]()

	// handler is the event handler to which the component should submit its events
	private var handler:(MyEvent)=>Unit=null

	// node is the JavaFX node generated by this component
	protected var node:Node=null

	// trigger specifies whether the JavaFX event handler of the node should be triggered
	// it is set to false when setting the JavaFX component's value programatically
	protected var trigger=true

	// method members

	def GetAttributes=attributes

	// GetPath returns the component's path
	def GetPath:Path=path

	// GetPrefixedPathGet returns the path in values from which the component should take its value on startup
	def GetPrefixedPathGet:Path=
	{
		if(path==null) return null
		Builder.PrefixBindingGet(GS("prefixget","components"))+GetPath
	}

	// GetPrefixedPathSet returns the path in values at which the component should store its value
	def GetPrefixedPathSet:Path=
	{
		if(path==null) return null
		Builder.PrefixBindingSet(GS("prefixset","components"))+GetPath
	}

	// StoreValue stores the component's value in values
	def StoreValue(value:Data)
	{
		val dostore=GB("store",true)
		if(!dostore) return
		if(path==null) return
		if(value==null) return
		val ppath=GetPrefixedPathSet
		if(ppath==null) return
		Builder.Set(ppath,value)
	}

	// GetInitialValue gets the component's value from values used for initialization
	def GetInitialValue:Data=Builder.Get(GetPrefixedPathGet)

	// GetStoredValue gets the component's stored value from values
	def GetStoredValue:Data=Builder.Get(GetPrefixedPathSet)

	// GetStringValue gets the string value of the component
	// getfunc specifies whether to use the initial or the stored value
	def GetStringValue(getfunc:Data,default:String=""):String=
	{
		if(GS("forcedefault","false")=="true") return default
		val get=getfunc
		if(get==null) return default
		if(get.isInstanceOf[StringData]) return get.asInstanceOf[StringData].value
		default
	}

	// GetInitialStringValue gets the initial string value
	def GetInitialStringValue(default:String=""):String=GetStringValue(GetInitialValue,default)

	// GetStoredStringValue gets the stored string value
	def GetStoredStringValue(default:String=""):String=GetStringValue(GetStoredValue,default)

	// GetInitialIntValue gets the initial int value
	def GetInitialIntValue(default:Int=0):Int=DataUtils.ParseInt(GetInitialStringValue(null),default)

	// GetStoredIntValue gets the stored int value
	def GetStoredIntValue(default:Int=0):Int=DataUtils.ParseInt(GetStoredStringValue(null),default)

	// GetInitialDoubleValue gets the initial double value
	def GetInitialDoubleValue(default:Double=0.0):Double=DataUtils.ParseDouble(GetInitialStringValue(null),default)

	// GetStoredDoubleValue gets the stored double value
	def GetStoredDoubleValue(default:Double=0.0):Double=DataUtils.ParseDouble(GetStoredStringValue(null),default)

	// GetInitialBooleanValue gets the initial boolean value
	def GetInitialBooleanValue(default:Boolean=false):Boolean=DataUtils.ParseBoolean(GetInitialStringValue(null),default)

	// GetStoredBooleanValue gets the stored boolean value
	def GetStoredBooleanValue(default:Boolean=false):Boolean=DataUtils.ParseBoolean(GetStoredStringValue(null),default)

	// GetId returns the id of the component, can be null
	def GetId:String=
	{
		if(path==null) return null
		path.AsString
	}

	def GetTrunkId:String=
	{
		if(path==null) return null
		val trunk=path.Trunk
		trunk.AsString
	}

	// SetId sets the path of the component from id ( id can be null )
	def SetId(id:String)
	{
		// Path.FromString returns null path for null id
		path=Path.FromString(id)
	}

	// GetHandler returns the handler of the component
	def GetHandler=handler

	// Fire fires an event on behalf of the component
	def Fire(kind:String,value:String)
	{	
		if(path==null) return
		val comp=this
		val ei=ExecutionItem(
			client="MyComponent.Fire",
			new Runnable{def run{
			handler(MyEvent(kind,comp,value))
		}})
		MyActor.queuedExecutor ! ei
	}

	// GetNode returns the JavaFX node of the component
	def GetNode:Node=node

	// GetChildren returns the children of the component
	def GetChildren:List[MyComponent]=children.toList

	// GetParent returns the JavaFX node of the component as instance of JavaFX Parent
	// only a Parent can be the root of a JavaFX scenegraph
	def GetParent:Parent=
	{
		if(node.isInstanceOf[Parent]) return node.asInstanceOf[Parent]
		null
	}

	// OwnCreateNode knows the specifics about how to create the component's node
	def OwnCreateNode:Node // abstract

	// CreateNode creates the node of the component
	// first the component specific creation takes place by calling OwnCreateNode
	// then properties belonging to larger classes of components are added
	def CreateNode:Node=
	{
		var node=OwnCreateNode

		var style=GS("style","")

		if(node!=null)
		{
			if(MyComponent.PredefStyles.contains(style))
			{
				node.setStyle(MyComponent.PredefStyles(style))
			}
			else
			{
				node.setStyle(style)
			}
		}

		if(node.isInstanceOf[Region])
		{
			if(HasProperty("width"))
			{
				val width=GD("width",0.0)
				node.asInstanceOf[Region].setMinWidth(width)
				node.asInstanceOf[Region].setMaxWidth(width)
			}

			if(HasProperty("height"))
			{
				val height=GD("height",0.0)
				node.asInstanceOf[Region].setMinHeight(height)
				node.asInstanceOf[Region].setMaxHeight(height)
			}

			if(HasProperty("padding"))
			{
				val pad=GD("padding",0.0)
				node.asInstanceOf[Region].setPadding(new Insets(pad,pad,pad,pad))
			}

			if(HasProperty("bimage"))
			{
				val path="backgroundimages/"+GS("bimage")

				val contain=GB("contain",false)
				val cover=GB("cover",true)

				node.asInstanceOf[Region].setBackground(new Background(new BackgroundImage(
					new Image(Resource.asStream(path)),
					BackgroundRepeat.REPEAT,BackgroundRepeat.REPEAT,BackgroundPosition.CENTER,
					new BackgroundSize(BackgroundSize.AUTO,BackgroundSize.AUTO,false,false,contain,cover)
				)))
			}
		}

		node
	}

	// OwnReportPrintable can report the component speicifics in printable form
	def OwnReportPrintable(level:Int=0,buff:String=""):String // abstract

	// ReportPrintable report the component in printable form
	def ReportPrintable(level:Int=0,buff:String=""):String=
	{
		DataUtils.Tabs(level)+OwnReportPrintable(level)+" id "+GetId+"\n"+
		(for(child<-children) yield DataUtils.Tabs(level+1)+child.ReportPrintable(level+1)).mkString("\n")
	}

	////////////////////////////////////////////////////////////////////
	// attributes

	// AddAttribute adds an attribute by key
	def AddAttribute(key:String,value:String)
	{
		if(key==null) return
		attributes+=(key->value)
	}

	// HasAttribute tells whethet the component has an attribute specified by key
	def HasAttribute(key:String):Boolean=
	{
		if(key==null) return false
		attributes.contains(key)
	}

	// HasProprty tells whether the component has a property signified by key, alias
	def HasProperty(key:String):Boolean=HasAttribute(key)

	// GetAttribute returns an attribute with default for the case it is not present
	def GetAttribute(key:String,default:String=null):String=
	{
		if(HasAttribute(key)) return attributes(key)
		default
	}

	// end attributes
	////////////////////////////////////////////////////////////////////

	// Get is same as GetAttribute but it returns null if the attribute is missing
	def Get(key:String):String=GetAttribute(key,null)

	// Set sets the value of an attribute denoted by key
	def Set(key:String,value:String)
	{
		AddAttribute(key,value)
	}

	////////////////////////////////////////////////////////////////////
	// Get[...]WithDefault methods implement the GetSetTypedStringValueWithDefault interface
	def GetStringWithDefault(key:String,default:String=""):String=GetAttribute(key,default)

	def GetIntWithDefault(key:String,default:Int=0):Int=DataUtils.ParseInt(GetAttribute(key),default)

	def GetDoubleWithDefault(key:String,default:Double=0.0):Double=DataUtils.ParseDouble(GetAttribute(key),default)

	def GetBooleanWithDefault(key:String,default:Boolean=false):Boolean=DataUtils.ParseBoolean(GetAttribute(key),default)
	// end Get[...]WithDefault methods
	////////////////////////////////////////////////////////////////////

}

////////////////////////////////////////////////////////////////////
// MyDummy
////////////////////////////////////////////////////////////////////

// dummy is a minimal component that does nothing
// only purpose is to hold an id

class MyDummy(id:String) extends MyComponent
{
	SetId(id)

	def OwnCreateNode:Node=null

	def OwnReportPrintable(level:Int=0,buff:String=""):String="dummy"
}

////////////////////////////////////////////////////////////////////
// MyBox
////////////////////////////////////////////////////////////////////

// box widgets: vbox and hbox

class MyBox(dir:String="v") extends MyComponent
{
	AddAttribute("gap","5")
	AddAttribute("padding","5")

	def ReplaceNode(n:Node)
	{
		if(dir=="v")
		{
			node.asInstanceOf[VBox].getChildren().clear()
			node.asInstanceOf[VBox].getChildren().add(n)
		}

		if(dir=="h")
		{
			node.asInstanceOf[HBox].getChildren().clear()
			node.asInstanceOf[HBox].getChildren().add(n)
		}
	}

	def OwnCreateNode:Node=
	{
		if(dir=="v") node=new VBox(GI("gap"))
		if(dir=="h") node=new HBox(GI("gap"))

		for(child<-children)
		{
			if(dir=="v") node.asInstanceOf[VBox].getChildren().add(child.CreateNode)
			if(dir=="h") node.asInstanceOf[HBox].getChildren().add(child.CreateNode)
		}

		node
	}

	def OwnReportPrintable(level:Int=0,buff:String=""):String=dir+"box"
}

////////////////////////////////////////////////////////////////////
// MyText
////////////////////////////////////////////////////////////////////

// text widgets: label, textfield, textarea

class MyText(subtype:String="field") extends MyComponent
{

	def SetText(text:String)
	{
		subtype match
		{
			case "field" => node.asInstanceOf[TextField].setText(text)
			case "label" => node.asInstanceOf[Label].setText(text)
			case "area" => node.asInstanceOf[TextArea].setText(text)
		}
	}

	def GetText:String=
	{
		subtype match
		{
			case "field" => node.asInstanceOf[TextField].getText()
			case "area" => node.asInstanceOf[TextArea].getText()
		}
	}

	def OwnCreateNode:Node=
	{
		subtype match
		{
			case "field" => node=new TextField()
			case "label" => node=new Label()
			case "area" => node=new TextArea()
			case _=> node=null
		}

		SetText(GetInitialStringValue(GS("text","")))

		if(subtype=="field")
		{
			node.asInstanceOf[TextField].setOnKeyPressed(new EventHandler[KeyEvent]
			{
				def handle(ev:KeyEvent)
				{
					if(ev.getCode().equals(KeyCode.ENTER))
					{						
						val text=GetText
						StoreValue(StringData(text))
						Fire("textfield entered",text)
					}
				}
			})
		}

		node
	}

	def OwnReportPrintable(level:Int=0,buff:String=""):String=s"text$subtype"
}

////////////////////////////////////////////////////////////////////
// MyButton
////////////////////////////////////////////////////////////////////

// Button widget

class MyButton extends MyComponent
{
	def OwnCreateNode:Node=
	{
		val text=GS("text")
		val img=GS("img",null)

		if(img!=null)
		{
			node=new Button(text,new ImageView(new Image(Resource.asStream(img))))
		}
		else
		{
			node=new Button(text)
		}

		node.asInstanceOf[Button].setOnAction(new EventHandler[ActionEvent]
		{
			def handle(ev:ActionEvent)
			{				
				Fire("button pressed",GetId)
			}
		})

		node
	}

	def OwnReportPrintable(level:Int=0,buff:String=""):String=s"button"
}

////////////////////////////////////////////////////////////////////
// MyWebView
////////////////////////////////////////////////////////////////////

// WebView widget

class MyWebView extends MyComponent
{
	def GetEngine:WebEngine=node.asInstanceOf[WebView].getEngine()

	def LoadContentAndScrollTo(content:String,yscroll:Double)
	{
		val e=GetEngine
		e.getLoadWorker().stateProperty().addListener(new ChangeListener[State]{
            def changed(ov: ObservableValue[_ <: State], oldState: State, newState: State) {
                if (newState == State.SUCCEEDED) {
                	val scrollheight=e.executeScript("document.body.scrollHeight").toString().toDouble
                	var calcheight=scrollheight*yscroll
                	if(calcheight>scrollheight) calcheight=scrollheight
                	if(calcheight< 0) calcheight=0
                	e.executeScript("window.scrollTo(" + 0 + "," + calcheight + ")");
				}
			}
		})
		e.loadContent(content)
	}

	def LoadContent(content:String)
	{
		val e=GetEngine
		e.loadContent(content)
	}

	def ExecuteScript(script:String):String=GetEngine.executeScript(script).toString()

	def WriteContent(content:String)
	{		
		ExecuteScript(Builder.WriteDocumentScript(content))
	}

	def OwnCreateNode:Node=
	{
		node=new WebView()

		if(HasAttribute("width"))
		{
			node.asInstanceOf[WebView].setMinWidth(GD("width",0.0))
			node.asInstanceOf[WebView].setMaxWidth(GD("width",0.0))
		}

		if(HasAttribute("height"))
		{
			node.asInstanceOf[WebView].setMinHeight(GD("height",0.0))
			node.asInstanceOf[WebView].setMaxHeight(GD("height",0.0))
		}

		node.asInstanceOf[WebView].setOnMouseClicked(new EventHandler[MouseEvent]
		{			
			def handle(mouseEvent:MouseEvent)
			{
	            var etype:String=mouseEvent.getEventType().toString()

	            if(etype=="MOUSE_CLICKED")
	            {
	            	Fire("webview clicked",GetId)
	            }

	        }
	    })

		node
	}

	def OwnReportPrintable(level:Int=0,buff:String=""):String=s"webview"
}

////////////////////////////////////////////////////////////////////
// MyCheckBox
////////////////////////////////////////////////////////////////////

// CheckBox widget

class MyCheckBox extends MyComponent
{

	def IsChecked:Boolean=
		{
			node.asInstanceOf[CheckBox].selectedProperty().get()
		}

	def SetChecked(value:Boolean)
	{
		trigger=false
		node.asInstanceOf[CheckBox].selectedProperty().set(value)
		trigger=true
	}

	def OwnCreateNode:Node=
	{
		node=new CheckBox()

		node.asInstanceOf[CheckBox].selectedProperty().addListener(new ChangeListener[java.lang.Boolean]
		{
			def changed(ov:ObservableValue[_ <: java.lang.Boolean],old_val:java.lang.Boolean,new_val:java.lang.Boolean)
			{
				if(trigger)
				{
					val new_val_str=""+new_val

					StoreValue(StringData(new_val_str))

					Fire("checkbox changed",new_val_str)
				}
			}
		})

		SetChecked(GetInitialBooleanValue(GB("checked",false)))

		node
	}

	def OwnReportPrintable(level:Int=0,buff:String=""):String=s"checkbox"
}

////////////////////////////////////////////////////////////////////
// MySlider
////////////////////////////////////////////////////////////////////

// Slider widget

class MySlider extends MyComponent
{

	var delay=3

	def GetValue=node.asInstanceOf[Slider].getValue()

	def SetValue(value:Double,dotrigger:Boolean=true)
	{
		if(!dotrigger) trigger=false
		node.asInstanceOf[Slider].setValue(value)
		trigger=true
	}

	def GetMax=node.asInstanceOf[Slider].getMax()

	def GetMin=node.asInstanceOf[Slider].getMin()

	def GetMiddle=(GetMax-GetMin)/2

	def OwnCreateNode:Node=
	{		
		node=new Slider()

		trigger=false

		if(HasAttribute("delay"))
		{
			delay=GI("delay",3)
		}

		if(HasAttribute("min"))
		{
			node.asInstanceOf[Slider].setMin(GD("min",0.0))
		}
		if(HasAttribute("max"))
		{
			node.asInstanceOf[Slider].setMax(GD("max",0.0))
		}
		if(HasAttribute("showticklabels"))
		{
			node.asInstanceOf[Slider].setShowTickLabels(GB("showticklabels",false))
		}
		if(HasAttribute("showtickmarks"))
		{
			node.asInstanceOf[Slider].setShowTickMarks(GB("showtickmarks",false))
		}
		if(HasAttribute("majortickunit"))
		{
			node.asInstanceOf[Slider].setMajorTickUnit(GD("majortickunit",1.0))
		}
		if(HasAttribute("minortickcount"))
		{
			node.asInstanceOf[Slider].setMinorTickCount(GI("minortickcount",1))
		}
		if(HasAttribute("blockincrement"))
		{
			node.asInstanceOf[Slider].setBlockIncrement(GD("blockincrement",1.0))
		}

		val comp=this

		node.asInstanceOf[Slider].valueProperty().addListener(new ChangeListener[Number]
		{
			def changed(ov:ObservableValue[_ <: Number],old_val:Number,new_val:Number)
			{
				if(trigger)
				{
					val new_val_str=new_val.toString()					

					StoreValue(StringData(new_val_str))

					//Fire("slider changed",new_val_str)

					if(GetPath!=null)
					{
						MyActor.repeatActor ! SubmitEventRequest(GetHandler,MyEvent("slider changed",comp,new_val_str),delay)
					}
				}
			}
		})		

		SetValue(GetInitialDoubleValue(GD("value",GetMiddle)))

		trigger=true

		node
	}

	def OwnReportPrintable(level:Int=0,buff:String=""):String=s"slider"
}

////////////////////////////////////////////////////////////////////
// MyComboBox
////////////////////////////////////////////////////////////////////

// ComboBox widget

class MyComboBox extends MyComponent
{

	var c:ComboBox[String]=null

	var items=List[String]()

	var selected:String=null

	def GetSelected:String=
	{
		val selobj=c.getSelectionModel().getSelectedItem()

		if(selobj!=null)
		{
			return selobj.toString()
		}

		return null
	}

	def Select(what:String)
	{
		if(what==null) return

		val i=items.indexOf(what)

		if(i>=0)
		{
			trigger=false
			c.getSelectionModel().select(i)
			selected=what
			trigger=true
		}
	}

	def CreateFromItems(set_items:List[String]=items,set_selected:String=selected)
	{
		if(items==null) return

		trigger=false

		items=set_items

		node.asInstanceOf[Group].getChildren().clear()

		c=new ComboBox[String]()

		c.getItems().addAll(FXCollections.observableList(items))

		node.asInstanceOf[Group].getChildren.add(c)

		c.setOnAction(new EventHandler[ActionEvent]
		{
			def handle(ev:ActionEvent)
			{
				if(trigger)
				{
					selected=GetSelected

					StoreValue(ReportData)

					Fire("combobox selected",selected)
				}
			}
		})

		Select(set_selected)

		trigger=true
	}

	def Reset
	{
		items=List[String]()
		selected=null
		return
	}

	def FromData(d:Data)
	{
		Reset
		if(d==null) return
		val itemsdata=d.G("{items}")
		items=itemsdata.asInstanceOf[ArrayData].array.map(a=>a.asInstanceOf[StringData].value).toList
		selected=GS("selected",null)
		val selecteddata=d.G("{selected}")
		if(selecteddata==null) return
		selected=selecteddata.asInstanceOf[StringData].value
	}

	def ReportData:Data=
	{
		val data=MapData()
		if(selected!=null) data.Add("selected",StringData(selected))
		data.Add("items",Data.ArrayDataFromListString(items))
		data
	}

	def OwnCreateNode:Node=
	{		
		node=new Group()

		FromData(GetInitialValue)

		CreateFromItems()

		node
	}

	def OwnReportPrintable(level:Int=0,buff:String=""):String=s"combobox"
}

////////////////////////////////////////////////////////////////////
// MyTab
////////////////////////////////////////////////////////////////////

// Tab widget

class MyTab extends MyComponent
{
	var caption:String=null

	var tabnode:Tab=null

	def OwnCreateNode:Node=
	{		
		tabnode=new Tab()

		caption=GS("caption","")

		tabnode.setText(caption)

		tabnode.setClosable(false)

		if(children.length>0)
		{
			val firstchild=children(0)

			firstchild.CreateNode

			tabnode.setContent(firstchild.GetNode)
		}

		node
	}

	def OwnReportPrintable(level:Int=0,buff:String=""):String=s"tab"
}

////////////////////////////////////////////////////////////////////
// MyTabPane
////////////////////////////////////////////////////////////////////

// TabPane widget

class MyTabPane extends MyComponent
{
	def OwnCreateNode:Node=
	{		
		node=new TabPane()

		for(child<-children)
		{
			if(child.isInstanceOf[MyTab])
			{
				child.CreateNode
				node.asInstanceOf[TabPane].getTabs().add(child.asInstanceOf[MyTab].tabnode)
			}
		}

		node.asInstanceOf[TabPane].getSelectionModel().selectedIndexProperty().addListener(
			new ChangeListener[Number]{
				def changed(ov: ObservableValue[_ <: Number], oldValue: Number, newValue: Number) {
					Fire("tab selected",""+newValue)
				}
			}
		)

		node
	}

	def OwnReportPrintable(level:Int=0,buff:String=""):String=s"tabpane"
}

////////////////////////////////////////////////////////////////////
// MyRadioBoxPane
////////////////////////////////////////////////////////////////////

// MyRadioBoxPane is a composite widget that highlights exactly its selected child

class MyRadioBoxPane extends MyComponent
{

	def StoreSelectionId = "{radiopaneselections}#"+GetId

	def GetSelected:String=
	{
		Builder.GS(StoreSelectionId,null)
	}

	def SetSelected(what:String)
	{
		Builder.S(StoreSelectionId,StringData(what))

		for(child<-children)
		{
			if(child.isInstanceOf[MyRadioBox])
			{
				child.asInstanceOf[MyRadioBox].SetSelected(child.GetId==what)
			}
		}
	}

	def OwnCreateNode:Node=
	{		
		node=new VBox()

		var firstchild:MyComponent=null

		for(child<-children)
		{
			if(child.isInstanceOf[MyRadioBox])
			{
				if(firstchild==null) firstchild=child

				child.CreateNode

				node.asInstanceOf[VBox].getChildren().add(child.GetNode)
			}
		}

		if(firstchild!=null)
		{
			var selected=GetSelected

			if(selected==null)
			{
				selected=firstchild.GetId
			}

			SetSelected(selected)
		}

		node
	}

	def OwnReportPrintable(level:Int=0,buff:String=""):String=s"radioboxpane"
}

////////////////////////////////////////////////////////////////////
// MyRadioBox
////////////////////////////////////////////////////////////////////

// MyRadioBox is a composite widget that is a member of MyRadioBoxPane

class MyRadioBox extends MyComponent
{

	def SetSelected(selected:Boolean)
	{
		node.asInstanceOf[VBox].setStyle(if(selected) "-fx-background-color: #afffaf;"
		 else "-fx-background-color: #afafaf;")
	}

	def OwnCreateNode:Node=
	{		
		node=new VBox()

		if(children.length>0)
		{
			val firstchild=children(0)

			firstchild.CreateNode

			node.asInstanceOf[VBox].getChildren().add(firstchild.GetNode)
		}

		node.asInstanceOf[VBox].setOnMouseClicked(new EventHandler[MouseEvent]
		{			
			def handle(mouseEvent:MouseEvent)
			{
		        var etype:String=mouseEvent.getEventType().toString()

	            if(etype=="MOUSE_CLICKED")
	            {
	            	parent.asInstanceOf[MyRadioBoxPane].SetSelected(GetId)
	            }
	        }
	    })

		node
	}

	def OwnReportPrintable(level:Int=0,buff:String=""):String=s"radiobox"
}

////////////////////////////////////////////////////////////////////
// MyGridPane
////////////////////////////////////////////////////////////////////

// GridPane widget

class MyGridPane extends MyComponent
{
	def OwnCreateNode:Node=
	{		
		node=new GridPane()

		if(HasProperty("hgap"))
		{
			val hgap=GI("hgap",0)

			node.asInstanceOf[GridPane].setHgap(hgap)
		}

		if(HasProperty("vgap"))
		{
			val vgap=GI("vgap",0)

			node.asInstanceOf[GridPane].setVgap(vgap)
		}

		for(child<-children)
		{
			child.CreateNode

			val col=child.GI("c",0)
			val row=child.GI("r",0)

			node.asInstanceOf[GridPane].add(child.GetNode,col,row)

			if(child.HasProperty("cs"))
			{
				val colspan=child.GI("cs",1)

				GridPane.setColumnSpan(child.GetNode,colspan)
			}

			if(child.HasProperty("rs"))
			{
				val rowspan=child.GI("rs",1)

				GridPane.setColumnSpan(child.GetNode,rowspan)
			}
		}

		node
	}

	def OwnReportPrintable(level:Int=0,buff:String=""):String=s"gridpane"
}

////////////////////////////////////////////////////////////////////
// MyScrollPane
////////////////////////////////////////////////////////////////////

// ScrollPane widget

class MyScrollPane extends MyComponent
{
	def OwnCreateNode:Node=
	{		
		node=new ScrollPane()

		if(HasProperty("hbarp"))
		{
			val hbarp=GS("hbarp","always")
			if(MyComponent.SCROLLBARPOLICIES.contains(hbarp))
				node.asInstanceOf[ScrollPane].setHbarPolicy(MyComponent.SCROLLBARPOLICIES(hbarp))
		}
		if(HasProperty("vbarp"))
		{
			val vbarp=GS("vbarp","always")
			if(MyComponent.SCROLLBARPOLICIES.contains(vbarp))
				node.asInstanceOf[ScrollPane].setVbarPolicy(MyComponent.SCROLLBARPOLICIES(vbarp))
		}

		if(children.length>0)
		{
			val firstchild=children(0)

			firstchild.CreateNode

			node.asInstanceOf[ScrollPane].setContent(firstchild.GetNode)
		}

		node
	}

	def OwnReportPrintable(level:Int=0,buff:String=""):String=s"scrollpane"
}

////////////////////////////////////////////////////////////////////
// MyColorPicker
////////////////////////////////////////////////////////////////////

// ColorPicker widget

class MyColorPicker extends MyComponent
{
	def GetColorValue:Color=node.asInstanceOf[ColorPicker].getValue()

	def GetStringValue:String=MyComponent.ColorToHex(GetColorValue)

	def SetColorValue(col:Color)
	{
		node.asInstanceOf[ColorPicker].setValue(col)
	}

	def SetStringValue(colstr:String)
	{
		SetColorValue(MyComponent.HexToColor(colstr))
	}

	def OwnCreateNode:Node=
	{		
		node=new ColorPicker()

		SetStringValue(GetInitialStringValue(GS("color","#FFFFFF")))

		node.asInstanceOf[ColorPicker].setOnAction(new EventHandler[ActionEvent]
		{
			def handle(ev:ActionEvent)
			{
				if(trigger)
				{
					val val_str=GetStringValue

					StoreValue(StringData(val_str))

					Fire("color picked",val_str)
				}
			}
		})

		node
	}

	def OwnReportPrintable(level:Int=0,buff:String=""):String=s"colorpicker"
}

////////////////////////////////////////////////////////////////////
// MyMenuItem
////////////////////////////////////////////////////////////////////

// MenuItem widget

class MyMenuItem extends MyComponent
{	
	var menuitemnode:MenuItem=null

	var text:String=null

	def OwnCreateNode:Node=
	{
		menuitemnode=new MenuItem()

		text=GS("text")

		menuitemnode.setText(text)

		menuitemnode.setOnAction(new EventHandler[ActionEvent]
		{
            def handle(ev:ActionEvent)
			{
				Fire("menuitem clicked",text)
			}
		})

		node
	}

	def OwnReportPrintable(level:Int=0,buff:String=""):String=s"menuitem"
}

////////////////////////////////////////////////////////////////////
// MyRadioMenuItem
////////////////////////////////////////////////////////////////////

// RadioMenuItem widget

class MyRadioMenuItem extends MyComponent
{	
	var radiomenuitemnode:RadioMenuItem=null

	var text:String=null

	def OwnCreateNode:Node=
	{
		radiomenuitemnode=new RadioMenuItem()

		text=GS("text")

		radiomenuitemnode.setText(text)

		radiomenuitemnode.setOnAction(new EventHandler[ActionEvent]
		{
            def handle(ev:ActionEvent)
			{
				Fire("radiomenuitem clicked",text)
			}
		})

		node
	}

	def OwnReportPrintable(level:Int=0,buff:String=""):String=s"radiomenuitem"
}

////////////////////////////////////////////////////////////////////
// MyMenu
////////////////////////////////////////////////////////////////////

// Menu widget

class MyMenu extends MyComponent
{	
	var menunode:Menu=null

	def OwnCreateNode:Node=
	{
		menunode=new Menu()

		menunode.setText(GS("text"))

		var togglegroups=Map[String,ToggleGroup]()

		for(child<-children)
		{
			if(child.isInstanceOf[MyMenuItem])
			{
				child.CreateNode

				menunode.getItems().add(child.asInstanceOf[MyMenuItem].menuitemnode)
			}
			else if(child.isInstanceOf[MyRadioMenuItem])
			{
				val togglegroupid=child.GS("togglegroup",null)

				if(togglegroupid!=null)
				{
					child.CreateNode

					val chrmin=child.asInstanceOf[MyRadioMenuItem].radiomenuitemnode
					
					menunode.getItems().add(chrmin)

					if(!togglegroups.contains(togglegroupid))
					{
						togglegroups+=(togglegroupid->new ToggleGroup())
					}

					val togglegroup=togglegroups(togglegroupid)

					chrmin.setToggleGroup(togglegroup)

					val selected=child.GB("selected",false)

					chrmin.setSelected(selected)
				}
			}
		}

		node
	}

	def OwnReportPrintable(level:Int=0,buff:String=""):String=s"menu"
}

////////////////////////////////////////////////////////////////////
// MyMenuBar
////////////////////////////////////////////////////////////////////

// MenuBar widget

class MyMenuBar extends MyComponent
{	

	def OwnCreateNode:Node=
	{
		node=new MenuBar()

		for(child<-children)
		{
			if(child.isInstanceOf[MyMenu])
			{
				child.CreateNode

				node.asInstanceOf[MenuBar].getMenus().add(child.asInstanceOf[MyMenu].menunode)
			}
		}

		node
	}

	def OwnReportPrintable(level:Int=0,buff:String=""):String=s"menubar"
}

////////////////////////////////////////////////////////////////////
// MyGameBrowser
////////////////////////////////////////////////////////////////////

// pgn games browser ( composite widget )

class MyCallbackButton( text: String , callback: () => Unit , style:String="" ) extends Button( text )
{
	setOnAction(new EventHandler[ActionEvent]{
		override def handle(e: ActionEvent)
		{
			callback()
		}
	});

	setStyle(style)
}

class GameBrowser() extends MyComponent
{

	var game_list:List[String]=null
	var step:Int=0
	var from:Int=0
	var vb:VBox=null
	var hb:HBox=null
	var sort_text:TextField=null
	var sort_combo:ComboBox[String]=null
	var w:WebView=null
	var lastclicked:Int= -1

	def OwnCreateNode:Node=
	{		
		game_list=List[String]()
		step=20
		from=0
		vb=new VBox(5)
		hb=new HBox(5)
		sort_text=new TextField()
		sort_combo=new ComboBox[String]()
		w=new WebView()

		hb.setPadding(new Insets(5,5,5,5))
		sort_combo.getItems().addAll(FXCollections.observableList(List("White","WhiteElo","Black","BlackElo","Date","Event","Result")))
		hb.getChildren().addAll(
			new MyCallbackButton("|<",tobegin),
			new MyCallbackButton("<<",fastback),
			new MyCallbackButton("<",back),

			new MyCallbackButton(">",forward),
			new MyCallbackButton(">>",fastforward),
			new MyCallbackButton(">|",toend),
			new Label("Sort by"),
			sort_combo,
			new MyCallbackButton("Sort",do_selected_sort),
			new Label("Search for: "),
			sort_text,
			new MyCallbackButton("Search",do_selected_search)
			)

		sort_combo.setOnAction(new EventHandler[ActionEvent]
		{
			def handle(ev:ActionEvent)
			{			
				do_selected_sort
			}
		})

		w.setOnMouseClicked(new EventHandler[MouseEvent]
		{			
			def handle(mouseEvent:MouseEvent)
			{
		        var etype:String=mouseEvent.getEventType().toString()

	            if(etype=="MOUSE_CLICKED")
	            {
	            	val xobj=w.getEngine().executeScript("x")

	            	if(xobj==null) return

	            	val x=xobj.toString()

	            	if(DataUtils.IsInt(x))
	            	{
	            		val index=x.toInt

	            		lastclicked=index

	            		if(GS("purpose")=="book")
						{
							Commands.GetBookGame(index)
						}
						else
						{
							Commands.GetPgnGame(index)
						}
	            		
	            		Fire("gamebrowser game loaded",""+index)
	            	}
	            }
	        }
	    })

		vb.getChildren().addAll(hb,w)

		node=vb

		node
	}

	def OwnReportPrintable(level:Int=0,buff:String=""):String=s"gamebrowser"

	def setStep(set_step:Int)
	{
		step=set_step
		update
	}

	def update
	{
		val len=game_list.length
		if(from>=len) from=len-step
		if(from< 0) from=0

		val highlight=(if(GS("purpose")=="book") -1 else lastclicked)
		w.getEngine().loadContent(Commands.g.printableGameList(from,from+step,true,game_list,highlight))
	}

	def tobegin()
	{
		from=0
		update
	}

	def back()
	{
		from-=step
		update
	}

	def fastback()
	{
		from-=10*step
		update
	}

	def fastforward()
	{
		from+=10*step
		update
	}

	def forward()
	{
		from+=step
		update
	}

	def toend()
	{
		from=game_list.length
		update
	}

	def sort_selected(sort:Boolean)
	{
		val selobj=sort_combo.getSelectionModel().getSelectedItem()

		val sel=if(selobj==null) "" else selobj.toString()

		var games=(for(md5<-game_list) yield
		{
			val g=new game

			val v=Settings.get_variant

			val path=s"stuff/games/$v/$md5.pgn"

			val pgn=org.apache.commons.io.FileUtils.readFileToString(
				new File(path),
				null.asInstanceOf[String]
			)

			g.parse_pgn(pgn,head_only=true)

			Tuple2[String,game](md5,g)
		}).toArray

		val search=sort_text.getText()
		sort_text.setText("")

		//println("search for _"+search+"_")

		def sortfunc(a:Tuple2[String,game],b:Tuple2[String,game]):Boolean=
		{
			if(sort) return a._2.get_header(sel)< b._2.get_header(sel)
			var matcha=false
			for((k,v)<-a._2.pgn_headers)
			{
				if(v.contains(search)) matcha=true
			}
			/*var matchb=false
			for((k,v)<-b._2.pgn_headers)
			{
				if(v.contains(search)) matchb=true
			}
			if(matcha && (!matchb)) return true*/
			matcha
		}

		games=games.sortWith(sortfunc)

		if(sel.contains("Elo")||(sel=="Result")) games=games.reverse

		game_list=(for(item<-games) yield item._1).toList

		from=0

		update

	}

	def do_selected_sort()
	{
		sort_selected(true)
	}

	def do_selected_search()
	{
		sort_selected(false)
	}
}

////////////////////////////////////////////////////////////////////
// object MyComponent
////////////////////////////////////////////////////////////////////

// object MyComponent holds static MyComponent functions and definitions

object MyComponent
{
	val PredefStyles=Map(
		"round"->
			("-fx-background-color:#090a0c,linear-gradient(#38424b 0%, #1f2429 20%, #191d22 100%),linear-gradient(#20262b, #191d22),radial-gradient(center 50% 0%, radius 100%, rgba(114,131,148,0.9), rgba(255,255,255,0)); "+
			"-fx-background-radius:20,20,20,20; "+
			"-fx-text-fill:white; "+
			"-fx-effect:dropshadow( three-pass-box , rgba(0,0,0,0.6) , 5, 0.0 , 0 , 1 ); "+
			"-fx-text-fill:linear-gradient(white, #d0d0d0); "+
			"-fx-font-size:14px; "+
			"-fx-font-weight:bold; "+
			"-fx-padding:6 6 6 6;"),
		"monotext"->
			"-fx-font-family: monospace; -fx-display-caret: false;"
	)

	val SCROLLBARPOLICIES=Map[String,ScrollPane.ScrollBarPolicy](
		"asneeded"->ScrollPane.ScrollBarPolicy.AS_NEEDED,
		"never"->ScrollPane.ScrollBarPolicy.NEVER,
		"always"->ScrollPane.ScrollBarPolicy.ALWAYS
	)

	def default_handler(ev:MyEvent)
	{
		//println(ev.ToPrintable)
	}

	def FromTag(tag:Tag,parent:MyComponent=null,handler:(MyEvent)=>Unit=MyComponent.default_handler):MyComponent=
	{
		if(tag==null) return null
		var comp:MyComponent=null
		var kind=tag.kind
		if(kind==null) return null
		kind match {
			case "vbox" => comp=new MyBox("v")
			case "hbox" => comp=new MyBox("h")
			case "label" => comp=new MyText("label")
			case "textfield" => comp=new MyText("field")
			case "textarea" => comp=new MyText("area")
			case "button" => comp=new MyButton
			case "webview" => comp=new MyWebView
			case "checkbox" => comp=new MyCheckBox
			case "slider" => comp=new MySlider
			case "combobox" => comp=new MyComboBox
			case "tab" => comp=new MyTab
			case "tabpane" => comp=new MyTabPane
			case "gridpane" => comp=new MyGridPane
			case "scrollpane" => comp=new MyScrollPane
			case "colorpicker" => comp=new MyColorPicker
			case "menuitem" => comp=new MyMenuItem
			case "radiomenuitem" => comp=new MyRadioMenuItem
			case "menu" => comp=new MyMenu
			case "menubar" => comp=new MyMenuBar
			case "guiboard" => comp=new GuiBoard
			case "gamebrowser" => comp=new GameBrowser
			case "radioboxpane" => comp=new MyRadioBoxPane
			case "radiobox" => comp=new MyRadioBox
			case _ => return null
		}
		var id=tag.GetAttribute("id")
		comp.SetId(id)
		for((k,v)<-tag.attributes)
		{
			comp.AddAttribute(k,v)
		}
		for(child<-tag.children)
		{
			comp.children+=FromTag(child,comp,handler)
		}
		comp.parent=parent
		comp.handler=handler
		Builder.RegisterComponent(id,comp)
		comp
	}

	def FromXML(e:scala.xml.Elem,handler:(MyEvent)=>Unit=MyComponent.default_handler):MyComponent=
	{
		val tag=Tag.FromXML(e)
		FromTag(tag,handler=handler)
	}

	def FromXMLFile(path:String,handler:(MyEvent)=>Unit=MyComponent.default_handler):MyComponent=
	{
		FromXML(scala.xml.XML.loadFile(path),handler)
	}

	def FromXMLString(content:String,handler:(MyEvent)=>Unit=MyComponent.default_handler):MyComponent=
	{
		FromXML(scala.xml.XML.loadString(content),handler)
	}

	def FromBlob(blob:String,handler:(MyEvent)=>Unit=MyComponent.default_handler):MyComponent=FromXMLString(blob,handler)

	def HexToColor(hex:String):Color=
	{
		val red=java.lang.Integer.valueOf(hex.substring(1,3),16)
		val green=java.lang.Integer.valueOf(hex.substring(3,5),16)
		val blue=java.lang.Integer.valueOf(hex.substring(5,7),16)

		Color.rgb(red,green,blue)
	}

	def ColorToHex(col:Color):String=
	{
		val red=(col.getRed()*255).toInt
		val green=(col.getGreen()*255).toInt
		val blue=(col.getBlue()*255).toInt

		"#%02X%02X%02X".format(red,green,blue)
	}
}
